"""Helpers to render and persist autostart scripts for each platform."""

from __future__ import annotations

from dataclasses import dataclass
from pathlib import Path
import textwrap


@dataclass(slots=True)
class AutostartArtifact:
    """Pair a filesystem path with the textual content to be written."""

    path: Path
    content: str

    def write(self) -> Path:
        """Persist the artifact to disk and return the written path."""

        self.path.parent.mkdir(parents=True, exist_ok=True)
        # Normalise trailing whitespace so generated files are deterministic.
        body = "\n".join(line.rstrip() for line in self.content.splitlines())
        if body and not body.endswith("\n"):
            body += "\n"
        self.path.write_text(body, encoding="utf-8")
        return self.path


def render_windows_scripts(base_dir: Path, *, autopilot_command: str) -> list[AutostartArtifact]:
    """Return the Windows autostart helper scripts stored under *base_dir*.

    The scripts mirror the commands executed during the first-run bootstrap so
    that operators can audit the configuration after the fact.  They also serve
    as deterministic artefacts that are easy to export in compliance reports.
    """

    target = base_dir / "autostart" / "windows"
    bootstrap_script = textwrap.dedent(
        f"""
        # Auto-generated by Watcher â€“ Task Scheduler bootstrap script.
        $runOnce = 'watcher init --auto'
        $autopilot = '{autopilot_command}'

        New-Item -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce' -Force | Out-Null
        Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce' -Name 'WatcherInit' -Type String -Value $runOnce -Force

        schtasks /Create /TN 'Watcher Autopilot' /TR $autopilot /SC ONLOGON /F
        """
    ).strip()

    readme = textwrap.dedent(
        """
        # Watcher Windows autostart artefacts

        - ``watcher-register-autostart.ps1`` reproduces the RunOnce entry and
          the scheduled task created during ``watcher init --auto``.
        - Any operator can re-run the script to repair an installation or audit
          the configuration without guessing the intended commands.
        """
    ).strip()

    return [
        AutostartArtifact(target / "watcher-register-autostart.ps1", bootstrap_script),
        AutostartArtifact(target / "README.md", readme),
    ]


def render_systemd_scripts(base_dir: Path, *, autopilot_command: str, working_dir: Path) -> list[AutostartArtifact]:
    """Return the systemd user service and timer definitions for Linux hosts."""

    target = base_dir / "autostart" / "linux"

    service_body = textwrap.dedent(
        f"""
        [Unit]
        Description=Watcher Autopilot orchestrator

        [Service]
        Type=oneshot
        WorkingDirectory={working_dir}
        Environment=WATCHER_HOME={base_dir}
        ExecStart={autopilot_command}

        [Install]
        WantedBy=default.target
        """
    ).strip()

    timer_body = textwrap.dedent(
        """
        [Unit]
        Description=Watcher Autopilot orchestrator schedule

        [Timer]
        OnBootSec=30s
        OnUnitActiveSec=1h
        Persistent=true
        Unit=watcher-autopilot.service

        [Install]
        WantedBy=timers.target
        """
    ).strip()

    return [
        AutostartArtifact(target / "watcher-autopilot.service", service_body),
        AutostartArtifact(target / "watcher-autopilot.timer", timer_body),
    ]


__all__ = [
    "AutostartArtifact",
    "render_systemd_scripts",
    "render_windows_scripts",
]

