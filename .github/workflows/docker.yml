name: Docker image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-push:
    name: Build and publish image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/watcher
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=tag,pattern=v*

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image digest reference
        id: image-ref
        run: |
          set -euo pipefail
          if [ -z "${{ steps.build.outputs.digest }}" ]; then
            echo "Image digest missing" >&2
            exit 1
          fi
          image_digest="ghcr.io/${{ github.repository_owner }}/watcher@${{ steps.build.outputs.digest }}"
          echo "IMAGE_DIGEST_REF=$image_digest" >> "$GITHUB_ENV"
          printf 'value=%s\n' "$image_digest" >> "$GITHUB_OUTPUT"

      - name: Scan image with Trivy
        id: trivy-scan
        uses: aquasecurity/trivy-action@v0.24.0
        with:
          image-ref: ${{ env.IMAGE_DIGEST_REF }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      - name: Upload Trivy scan report
        if: always() && steps.trivy-scan.outcome != 'skipped'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-results.sarif
          if-no-files-found: warn

      - name: Generate CycloneDX SBOM
        id: sbom
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_DIGEST_REF }}
          format: cyclonedx-json
          output-file: watcher-image-sbom.cdx.json
          artifact-name: watcher-image-sbom

      - name: Sign published images
        if: success()
        run: |
          set -euo pipefail
          mkdir -p sigstore
          while IFS= read -r tag; do
            if [ -z "$tag" ]; then
              continue
            fi
            safe_name=$(echo "$tag" | sed 's#[/:]#__#g')
            bundle="sigstore/${safe_name}.sigstore"
            cosign sign --yes --output-bundle "$bundle" "$tag"
          done <<< "${{ steps.meta.outputs.tags }}"

      - name: Upload signature bundles
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cosign-bundles
          path: sigstore/*.sigstore
          if-no-files-found: warn
