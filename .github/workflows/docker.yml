name: Docker image

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-push:
    name: Build and publish image
    runs-on: ubuntu-24.04
    outputs:
      image-digest: ${{ steps.digest.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:rootless

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Build and push image
        id: bp
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/watcher:latest
            ghcr.io/${{ github.repository_owner }}/watcher:${{ github.ref_name }}
          outputs: type=image,push-by-digest=true,name=ghcr.io/${{ github.repository_owner }}/watcher
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Read digest
        id: digest
        run: echo "digest=${{ steps.bp.outputs.digest }}" >> "$GITHUB_OUTPUT"

      - name: Verify published image platforms
        run: |
          set -euo pipefail
          docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/watcher:${{ github.ref_name }}

      - name: Set image digest reference
        run: |
          echo "IMAGE_DIGEST_REF=ghcr.io/${{ github.repository_owner }}/watcher@${{ steps.bp.outputs.digest }}" >> "$GITHUB_ENV"

      - name: Scan image with Trivy
        id: trivy-scan
        uses: aquasecurity/trivy-action@v0.24.0
        with:
          image-ref: ${{ env.IMAGE_DIGEST_REF }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      - name: Upload Trivy scan report
        if: always() && steps.trivy-scan.outcome != 'skipped'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-results.sarif
          if-no-files-found: warn

      - name: Generate CycloneDX SBOM
        id: sbom
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_DIGEST_REF }}
          format: cyclonedx-json
          output-file: watcher-image-sbom.cdx.json
          artifact-name: watcher-image-sbom

      - name: Generate SPDX SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_DIGEST_REF }}
          format: spdx-json
          output-file: sbom.spdx.json
          artifact-name: watcher-image-sbom-spdx

      - name: Sign published images
        run: |
          set -euo pipefail
          mkdir -p sigstore
          for tag in "ghcr.io/${{ github.repository_owner }}/watcher:latest" "ghcr.io/${{ github.repository_owner }}/watcher:${{ github.ref_name }}"; do
            safe_name=$(echo "$tag" | sed 's#[/:]#__#g')
            bundle="sigstore/${safe_name}.sigstore"
            cosign sign --yes --output-bundle "$bundle" "$tag"
          done

      - name: Upload signature bundles
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cosign-bundles
          path: sigstore/*.sigstore
          if-no-files-found: warn

  generate-provenance:
    name: Generate image SLSA provenance
    needs: build-and-push
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.10.0
    with:
      image: ghcr.io/${{ github.repository_owner }}/watcher
      digest: ${{ needs.build-and-push.outputs.image-digest }}
      registry-username: ${{ github.actor }}
      registry-password: ${{ secrets.GITHUB_TOKEN }}
    secrets: inherit

  normalize-provenance:
    name: Publish provenance artifact
    needs:
      - build-and-push
      - generate-provenance
    runs-on: ubuntu-latest
    steps:
      - name: Download provenance
        uses: actions/download-artifact@v4
        with:
          path: provenance
          merge-multiple: true

      - name: Normalize provenance filename
        run: |
          set -euo pipefail
          PROVENANCE=$(find provenance -name "*.intoto.jsonl" -print -quit)
          if [ -z "$PROVENANCE" ]; then
            echo "Provenance file not found" >&2
            ls -R provenance >&2 || true
            exit 1
          fi
          mkdir -p provenance/dist
          mv "$PROVENANCE" provenance/dist/watcher-image.intoto.jsonl

      - name: Upload provenance artifact
        uses: actions/upload-artifact@v4
        with:
          name: watcher-image-provenance
          path: provenance/dist/watcher-image.intoto.jsonl
          if-no-files-found: error
