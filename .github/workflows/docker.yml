name: Docker image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build and publish image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/watcher
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=tag,pattern=v*

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Download Syft
        uses: anchore/sbom-action/download-syft@v0

      - name: Generate container SBOM
        id: generate-sbom
        run: |
          set -euo pipefail
          PRIMARY_TAG=$(printf '%s\n' "${{ steps.meta.outputs.tags }}" | head -n 1)
          if [ -z "$PRIMARY_TAG" ]; then
            echo "No image tag was generated" >&2
            exit 1
          fi
          syft "$PRIMARY_TAG" -o cyclonedx-json > Watcher-container-sbom.cdx.json
          echo "sbom-file=Watcher-container-sbom.cdx.json" >> "$GITHUB_OUTPUT"

      - name: Upload container SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: Watcher-container-sbom
          if-no-files-found: error
          path: ${{ steps.generate-sbom.outputs.sbom-file }}

      - name: Push image
        run: |
          set -euo pipefail
          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              docker image push "$tag"
            fi
          done < <(printf '%s\n' "${{ steps.meta.outputs.tags }}")
