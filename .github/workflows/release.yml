name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  PYTHONHASHSEED: "42"
  PYINSTALLER_CONFIG_DIR: ".pyinstaller"
  WATCHER_TRAINING__SEED: "42"
  CUBLAS_WORKSPACE_CONFIG: ":4096:8"
  TORCH_DETERMINISTIC: "1"

jobs:
  build-python-distributions:
    name: Build Python distributions
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Validate SemVer tag
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF_NAME}" != v[0-9]*.[0-9]*.[0-9]* ]]; then
            echo "Release tag '${GITHUB_REF_NAME}' must match vMAJOR.MINOR.PATCH" >&2
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Configure reproducible build metadata
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
import os
import pathlib
import subprocess

workspace = pathlib.Path(os.environ["GITHUB_WORKSPACE"])
(workspace / ".pyinstaller").mkdir(parents=True, exist_ok=True)

ref_candidates = []
ref = os.environ.get("GITHUB_REF")
if ref:
    ref_candidates.append(ref)
ref_name = os.environ.get("GITHUB_REF_NAME")
if ref_name:
    ref_candidates.append(f"refs/tags/{ref_name}")
ref_candidates.append("HEAD")

epoch = None
for candidate in ref_candidates:
    try:
        value = subprocess.check_output([
            "git",
            "log",
            "-1",
            "--format=%ct",
            candidate,
        ], text=True).strip()
    except subprocess.CalledProcessError:
        continue
    if value:
        epoch = value
        break

if epoch is None:
    raise SystemExit("Unable to determine SOURCE_DATE_EPOCH")

with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as fh:
    fh.write(f"SOURCE_DATE_EPOCH={epoch}\n")
PY

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build wheel and sdist
        run: python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-python-distributions
          if-no-files-found: error
          path: |
            dist/*.whl
            dist/*.tar.gz

  build-windows-installer:
    name: Build and sign Windows installer
    runs-on: windows-latest
    permissions:
      contents: write
      id-token: write
    outputs:
      artifact-sha256: ${{ steps.artifact-digest.outputs.sha256 }}
    steps:
      - name: Validate SemVer tag
        shell: pwsh
        run: |
          if (-not ($env:GITHUB_REF_NAME -match '^v\d+\.\d+\.\d+$')) {
            Write-Error "Release tag '$env:GITHUB_REF_NAME' must match vMAJOR.MINOR.PATCH"
          }

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Configure reproducible build metadata
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
import os
import pathlib
import subprocess

workspace = pathlib.Path(os.environ["GITHUB_WORKSPACE"])
(workspace / ".pyinstaller").mkdir(parents=True, exist_ok=True)

ref_candidates = []
ref = os.environ.get("GITHUB_REF")
if ref:
    ref_candidates.append(ref)
ref_name = os.environ.get("GITHUB_REF_NAME")
if ref_name:
    ref_candidates.append(f"refs/tags/{ref_name}")
ref_candidates.append("HEAD")

epoch = None
for candidate in ref_candidates:
    try:
        value = subprocess.check_output([
            "git",
            "log",
            "-1",
            "--format=%ct",
            candidate,
        ], text=True).strip()
    except subprocess.CalledProcessError:
        continue
    if value:
        epoch = value
        break

if epoch is None:
    raise SystemExit("Unable to determine SOURCE_DATE_EPOCH")

with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as fh:
    fh.write(f"SOURCE_DATE_EPOCH={epoch}\n")
PY

      - name: Install build dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller

      - name: Install SBOM tooling
        shell: pwsh
        run: python -m pip install cyclonedx-bom cyclonedx-py

      - name: Build Windows executable
        shell: pwsh
        run: pyinstaller packaging/watcher.spec --noconfirm

      - name: Generate SBOM
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          cyclonedx-py environment --format json --output-file dist/Watcher-sbom.json

      - name: Package installer archive
        shell: pwsh
        run: |
          $source = Join-Path 'dist' 'Watcher'
          if (-not (Test-Path $source)) {
            throw "Expected PyInstaller output '$source' was not found."
          }
          $exe = Join-Path $source 'Watcher.exe'
          if (-not (Test-Path $exe)) {
            throw "Executable '$exe' is missing from the PyInstaller directory."
          }
          $archive = Join-Path 'dist' 'Watcher-Setup.zip'
          Compress-Archive -Path $source -DestinationPath $archive -Force

      - name: Normalize installer archive metadata
        shell: pwsh
        run: python scripts/normalize_zip_metadata.py dist/Watcher-Setup.zip

      - name: Sign release artifact
        uses: sigstore/gh-action@v2.1.1
        with:
          artifact: dist/Watcher-Setup.zip
          bundle: dist/Watcher-Setup.zip.sigstore

      - name: Compute artifact digest
        id: artifact-digest
        shell: pwsh
        run: |
          $hash = Get-FileHash dist/Watcher-Setup.zip -Algorithm SHA256
          "sha256=sha256:$($hash.Hash.ToLower())" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          if-no-files-found: error
          path: |
            dist/Watcher-Setup.zip
            dist/Watcher-Setup.zip.sigstore
            dist/Watcher-sbom.json

  build-unix-executables:
    name: Build ${{ matrix.display-name }} executable
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      id-token: write
    env:
      APPLE_CODESIGN_P12: ${{ secrets.APPLE_CODESIGN_P12 }}
      APPLE_CODESIGN_P12_PASSWORD: ${{ secrets.APPLE_CODESIGN_P12_PASSWORD }}
      APPLE_CODESIGN_IDENTITY: ${{ secrets.APPLE_CODESIGN_IDENTITY }}
      APPLE_NOTARIZE_APPLE_ID: ${{ secrets.APPLE_NOTARIZE_APPLE_ID }}
      APPLE_NOTARIZE_TEAM_ID: ${{ secrets.APPLE_NOTARIZE_TEAM_ID }}
      APPLE_NOTARIZE_PASSWORD: ${{ secrets.APPLE_NOTARIZE_PASSWORD }}
      APPLE_NOTARIZE_BUNDLE_ID: ${{ secrets.APPLE_NOTARIZE_BUNDLE_ID }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            display-name: Linux
            artifact-suffix: linux-x86_64
            sbom-name: Watcher-linux-sbom.json
            archive-name: Watcher-linux-x86_64.tar.gz
          - os: macos-latest
            display-name: macOS
            artifact-suffix: macos-x86_64
            sbom-name: Watcher-macos-sbom.json
            archive-name: Watcher-macos-x86_64.zip
    steps:
      - name: Validate SemVer tag
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! "${GITHUB_REF_NAME}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Release tag '${GITHUB_REF_NAME}' must match vMAJOR.MINOR.PATCH" >&2
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Configure reproducible build metadata
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
import os
import pathlib
import subprocess

workspace = pathlib.Path(os.environ["GITHUB_WORKSPACE"])
(workspace / ".pyinstaller").mkdir(parents=True, exist_ok=True)

ref_candidates = []
ref = os.environ.get("GITHUB_REF")
if ref:
    ref_candidates.append(ref)
ref_name = os.environ.get("GITHUB_REF_NAME")
if ref_name:
    ref_candidates.append(f"refs/tags/{ref_name}")
ref_candidates.append("HEAD")

epoch = None
for candidate in ref_candidates:
    try:
        value = subprocess.check_output([
            "git",
            "log",
            "-1",
            "--format=%ct",
            candidate,
        ], text=True).strip()
    except subprocess.CalledProcessError:
        continue
    if value:
        epoch = value
        break

if epoch is None:
    raise SystemExit("Unable to determine SOURCE_DATE_EPOCH")

with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as fh:
    fh.write(f"SOURCE_DATE_EPOCH={epoch}\n")
PY

      - name: Install build dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller

      - name: Install SBOM tooling
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install cyclonedx-bom cyclonedx-py

      - name: Build executable
        shell: bash
        run: |
          set -euo pipefail
          pyinstaller packaging/watcher.spec --noconfirm

      - name: Import signing certificate
        if: matrix.os == 'macos-latest' && env.APPLE_CODESIGN_P12 != '' && env.APPLE_CODESIGN_P12_PASSWORD != ''
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ env.APPLE_CODESIGN_P12 }}
          p12-password: ${{ env.APPLE_CODESIGN_P12_PASSWORD }}

      - name: Codesign macOS binary
        if: matrix.os == 'macos-latest' && env.APPLE_CODESIGN_IDENTITY != ''
        shell: bash
        run: |
          set -euo pipefail
          codesign --force --deep --options runtime --timestamp --sign "$APPLE_CODESIGN_IDENTITY" dist/Watcher/Watcher

      - name: Generate SBOM
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          SBOM_FILE="dist/${{ matrix.sbom-name }}"
          cyclonedx-py environment --format json --output-file "$SBOM_FILE"
          echo "SBOM_FILE=$SBOM_FILE" >> "$GITHUB_ENV"

      - name: Package executable
        shell: bash
        run: |
          set -euo pipefail
          DIST_DIR="dist/Watcher"
          if [ ! -d "$DIST_DIR" ]; then
            echo "Expected PyInstaller output '$DIST_DIR' was not found." >&2
            exit 1
          fi
          ARCHIVE="dist/${{ matrix.archive-name }}"
          case "${{ matrix.os }}" in
            ubuntu-latest)
              tar --sort=name \
                --mtime="@${SOURCE_DATE_EPOCH}" \
                --owner=0 \
                --group=0 \
                --numeric-owner \
                -czf "$ARCHIVE" -C dist Watcher
              ;;
            macos-latest)
              ditto -c -k --sequesterRsrc --keepParent "$DIST_DIR" "$ARCHIVE"
              ;;
            *)
              echo "Unsupported OS '${{ matrix.os }}'." >&2
              exit 1
              ;;
          esac
          echo "ARCHIVE_FILE=$ARCHIVE" >> "$GITHUB_ENV"

      - name: Normalize archive metadata
        if: endsWith(matrix.archive-name, '.zip')
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${ARCHIVE_FILE:-}" ]; then
            echo "ARCHIVE_FILE is not defined" >&2
            exit 1
          fi
          python scripts/normalize_zip_metadata.py "$ARCHIVE_FILE"

      - name: Store notarization credentials
        if: matrix.os == 'macos-latest' && env.APPLE_NOTARIZE_APPLE_ID != '' && env.APPLE_NOTARIZE_TEAM_ID != '' && env.APPLE_NOTARIZE_PASSWORD != ''
        shell: bash
        run: |
          set -euo pipefail
          xcrun notarytool store-credentials "watcher-notarytool-profile" \
            --apple-id "$APPLE_NOTARIZE_APPLE_ID" \
            --team-id "$APPLE_NOTARIZE_TEAM_ID" \
            --password "$APPLE_NOTARIZE_PASSWORD"

      - name: Notarize macOS archive
        if: matrix.os == 'macos-latest' && env.APPLE_NOTARIZE_APPLE_ID != '' && env.APPLE_NOTARIZE_TEAM_ID != '' && env.APPLE_NOTARIZE_PASSWORD != ''
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${ARCHIVE_FILE:-}" ]; then
            echo "ARCHIVE_FILE is not defined" >&2
            exit 1
          fi
          BUNDLE_ID="${APPLE_NOTARIZE_BUNDLE_ID:-com.github.${GITHUB_REPOSITORY//\//.}.watcher}"
          LOG_FILE="dist/Watcher-macos-notarization.json"
          xcrun notarytool submit "$ARCHIVE_FILE" \
            --keychain-profile "watcher-notarytool-profile" \
            --primary-bundle-id "$BUNDLE_ID" \
            --wait \
            --output-format json > "$LOG_FILE"
          echo "NOTARIZATION_LOG=$LOG_FILE" >> "$GITHUB_ENV"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.artifact-suffix }}
          if-no-files-found: error
          path: |
            ${{ env.ARCHIVE_FILE }}
            ${{ env.SBOM_FILE }}

      - name: Upload notarization log
        if: matrix.os == 'macos-latest' && env.NOTARIZATION_LOG != ''
        uses: actions/upload-artifact@v4
        with:
          name: release-macos-notarization
          if-no-files-found: error
          path: ${{ env.NOTARIZATION_LOG }}

  generate-provenance:
    name: Generate SLSA provenance
    needs: build-windows-installer
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.10.0
    with:
      build-artifacts: release-assets
      provenance-subject-name: Watcher-Setup.zip
      provenance-subject-digest: ${{ needs.build-windows-installer.outputs.artifact-sha256 }}

  publish-release:
    name: Publish GitHub release
    needs:
      - build-python-distributions
      - build-windows-installer
      - build-unix-executables
      - generate-provenance
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Normalize provenance filename
        run: |
          set -euo pipefail
          PROVENANCE=$(find dist -name "*.intoto.jsonl" -print -quit)
          if [ -z "$PROVENANCE" ]; then
            echo "Provenance file not found" >&2
            exit 1
          fi
          mv "$PROVENANCE" dist/Watcher-Setup.intoto.jsonl

      - name: Verify Windows provenance
        uses: slsa-framework/slsa-verifier/actions/verify-artifact@v2.4.2
        with:
          provenance-path: dist/Watcher-Setup.intoto.jsonl
          artifact-path: dist/Watcher-Setup.zip

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Watcher ${{ github.ref_name }}
          generate_release_notes: true
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            dist/Watcher-Setup.zip
            dist/Watcher-Setup.zip.sigstore
            dist/Watcher-sbom.json
            dist/Watcher-Setup.intoto.jsonl
            dist/Watcher-linux-x86_64.tar.gz
            dist/Watcher-linux-sbom.json
            dist/Watcher-macos-x86_64.zip
            dist/Watcher-macos-sbom.json
            dist/watcher-*.whl
            dist/watcher-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
