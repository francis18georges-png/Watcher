name: CI

on:
  push:
  pull_request:

env:
  PYTHONHASHSEED: "42"
  WATCHER_TRAINING__SEED: "42"
  CUBLAS_WORKSPACE_CONFIG: ":4096:8"
  TORCH_DETERMINISTIC: "1"
  TRIVY_CACHE_DIR: .trivy

jobs:
  determine-python:
    name: Determine Python versions
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.python-versions.outputs.matrix }}
    steps:
      - name: Resolve matrix
        id: python-versions
        shell: bash
        run: |
          python - <<'PY'
          import json
          import os
          import re
          from pathlib import Path

          raw = os.environ.get("WATCHER_NOX_PYTHON")
          versions = [
              fragment.strip()
              for fragment in re.split(r"[,\s]+", raw or "")
              if fragment and fragment.strip()
          ]
          if not versions:
              versions = ["3.10", "3.11", "3.12"]

          output = Path(os.environ["GITHUB_OUTPUT"])
          with output.open("a", encoding="utf-8") as file:
              file.write(f"matrix={json.dumps(versions)}\n")
          PY

  scorecard:
    name: Scorecard gate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run OpenSSF Scorecard
        uses: ossf/scorecard-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          results_file: scorecard-results.json
          results_format: json
          publish_results: false

      - name: Enforce minimum score
        run: |
          python - <<'PY'
          import json
          from pathlib import Path

          results = json.loads(Path("scorecard-results.json").read_text())
          score = results.get("score")

          print(f"OpenSSF Scorecard: {score}")
          if score is None:
            raise SystemExit("Unable to read Scorecard score from scorecard-results.json")

          if score < 7:
            raise SystemExit("OpenSSF Scorecard score below policy threshold (7)")
          PY

  quality:
    name: Quality checks
    needs:
      - scorecard
      - determine-python
    runs-on: ${{ matrix.os }}
    env:
      DVC_CREDENTIALS_AVAILABLE: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ${{ fromJSON(needs.determine-python.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Prepare cache directories
        run: mkdir -p .dvc/cache "$TRIVY_CACHE_DIR"
        shell: bash

      - name: Cache DVC artifacts
        uses: actions/cache@v4
        with:
          path: .dvc/cache
          key: dvc-${{ runner.os }}-${{ hashFiles('dvc.lock', 'dvc.yaml', '.dvc/config') }}
          restore-keys: |
            dvc-${{ runner.os }}-

      - name: Cache Trivy database
        uses: actions/cache@v4
        with:
          path: ${{ env.TRIVY_CACHE_DIR }}
          key: trivy-${{ runner.os }}-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            trivy-${{ runner.os }}-

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install nox dvc

      - name: Install security CLIs
        run: python scripts/install_cli_tools.py --install-dir ./.tools --add-to-path

      - name: Pull data artifacts
        if: env.DVC_CREDENTIALS_AVAILABLE == 'true'
        run: dvc pull
        continue-on-error: true

      - name: Verify data artifacts
        if: env.DVC_CREDENTIALS_AVAILABLE == 'true'
        run: dvc status

      - name: Skip DVC artifact checks
        if: env.DVC_CREDENTIALS_AVAILABLE != 'true'
        run: >-
          echo "::warning::Skipping DVC artifact pull and verification because AWS credentials are unavailable for forked pull requests."

      - name: Validate Windows installer
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./installer.ps1 -SkipOllama

      - name: Run micro benchmarks
        if: runner.os == 'Linux'
        run: python -m app.core.benchmark run --samples 5 --warmup 1

      - name: Check benchmark thresholds
        if: runner.os == 'Linux'
        run: python -m app.core.benchmark check

      - name: Smoke test launcher in headless mode
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          DISPLAY: ""
        run: |
          $script = Join-Path $PWD.Path 'run.ps1'
          $job = Start-Job -ScriptBlock {
            param($path)
            $env:DISPLAY = ""
            & $path
          } -ArgumentList $script

          try {
            Start-Sleep -Seconds 5

            switch ($job.State) {
              'Failed' {
                $errors = Receive-Job -Job $job -ErrorAction SilentlyContinue | Out-String
                if (-not $errors) {
                  $errors = ($job.ChildJobs | ForEach-Object { $_.JobStateInfo.Reason } | Out-String)
                }
                throw "run.ps1 failed to start.`n$errors"
              }
              'Completed' {
                $output = Receive-Job -Job $job | Out-String
                throw "run.ps1 exited prematurely.`n$output"
              }
            }
          }
          finally {
            if ($job.State -eq 'Running') {
              Stop-Job -Job $job | Out-Null
            }
            $logs = Receive-Job -Job $job -ErrorAction SilentlyContinue | Out-String
            if ($logs) {
              Write-Host $logs
            }
            Remove-Job -Job $job
          }

      - name: Run quality pipeline
        run: nox -s lint typecheck tests coverage build security

      - name: Upload CycloneDX SBOM
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Watcher-sbom-${{ runner.os }}
          path: dist/Watcher-sbom.json
          if-no-files-found: ignore

  windows-installer:
    name: Build Windows installer
    needs: quality
    runs-on: windows-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller

      - name: Build Windows executable
        shell: pwsh
        run: pyinstaller packaging/watcher.spec --noconfirm

      - name: Create installer archive
        shell: pwsh
        run: |
          $archive = "dist/Watcher-Setup.zip"
          if (Test-Path $archive) {
            Remove-Item $archive
          }
          Compress-Archive -Path "dist/Watcher/*" -DestinationPath $archive

      - name: Sign installer archive
        uses: sigstore/gh-action@v2.1.1
        with:
          artifact: dist/Watcher-Setup.zip
          bundle: dist/Watcher-Setup.zip.sigstore

      - name: Upload Windows installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: Watcher-Setup
          path: |
            dist/Watcher-Setup.zip
            dist/Watcher-Setup.zip.sigstore
