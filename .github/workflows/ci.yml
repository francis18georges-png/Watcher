name: CI

on:
  push:
  pull_request:

jobs:
  quality:
    name: Quality checks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12"]
    env:
      PYTHONHASHSEED: "0"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Prepare cache directories
        run: mkdir -p .dvc/cache
        shell: bash

      - name: Cache DVC artifacts
        uses: actions/cache@v4
        with:
          path: .dvc/cache
          key: dvc-${{ runner.os }}-${{ hashFiles('dvc.lock', 'dvc.yaml', '.dvc/config') }}
          restore-keys: |
            dvc-${{ runner.os }}-

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install nox dvc

      - name: Pull data artifacts
        run: dvc pull
        continue-on-error: true

      - name: Run Windows installer
        if: runner.os == 'Windows'
        shell: pwsh
        run: pwsh -NoProfile -File ./installer.ps1 -SkipOllama

      - name: Validate Windows CLI launcher
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          DISPLAY: ""
        run: |
          $env:DISPLAY = ""
          $runScript = Join-Path $PWD.Path 'run.ps1'
          $psi = New-Object System.Diagnostics.ProcessStartInfo
          $psi.FileName = 'pwsh'
          $psi.ArgumentList.Add('-NoProfile') | Out-Null
          $psi.ArgumentList.Add('-File') | Out-Null
          $psi.ArgumentList.Add($runScript) | Out-Null
          $psi.RedirectStandardInput = $true
          $psi.RedirectStandardOutput = $true
          $psi.RedirectStandardError = $true
          $psi.UseShellExecute = $false
          $process = New-Object System.Diagnostics.Process
          $process.StartInfo = $psi
          $null = $process.Start()
          $process.StandardInput.WriteLine('exit')
          $process.StandardInput.Close()
          $process.WaitForExit()
          $stdout = $process.StandardOutput.ReadToEnd()
          $stderr = $process.StandardError.ReadToEnd()
          if ($stdout) { Write-Host $stdout }
          if ($stderr) { Write-Host $stderr }
          if ($process.ExitCode -ne 0) {
            throw "run.ps1 failed with exit code $($process.ExitCode)"
          }

      - name: Run quality pipeline
        run: nox -s lint typecheck security tests build

  windows-installer:
    name: Build Windows installer
    needs: quality
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller

      - name: Build Windows executable
        shell: pwsh
        run: pyinstaller packaging/watcher.spec --noconfirm

      - name: Create installer archive
        shell: pwsh
        run: |
          $archive = "dist/Watcher-Setup.zip"
          if (Test-Path $archive) {
            Remove-Item $archive
          }
          Compress-Archive -Path "dist/Watcher/*" -DestinationPath $archive

      - name: Upload Windows installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: Watcher-Setup
          path: dist/Watcher-Setup.zip
